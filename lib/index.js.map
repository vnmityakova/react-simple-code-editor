{"version":3,"sources":["../src/index.js"],"names":["React","KEYCODE_ENTER","KEYCODE_TAB","KEYCODE_BACKSPACE","KEYCODE_Y","KEYCODE_Z","KEYCODE_M","KEYCODE_PARENS","KEYCODE_BRACKETS","KEYCODE_QUOTE","KEYCODE_BACK_QUOTE","KEYCODE_ESCAPE","HISTORY_LIMIT","HISTORY_TIME_GAP","isWindows","global","test","navigator","platform","isMacLike","className","cssText","Editor","state","capture","top","left","isMenuVisible","menu","_recordCurrentState","input","_input","value","selectionStart","selectionEnd","_recordChange","_getLines","text","position","substring","split","record","overwrite","_history","stack","offset","length","slice","count","extras","Math","max","timestamp","Date","now","last","re","previous","pop","match","current","startsWith","push","_updateInput","props","onValueChange","_applyEdits","_undoEdit","_redoEdit","min","_handleKeyDown","e","tabSize","insertSpaces","ignoreTabKey","onKeyDown","defaultPrevented","keyCode","target","blur","tabCharacter","repeat","preventDefault","shiftKey","linesBeforeCaret","startLine","endLine","nextValue","map","line","i","join","startLineText","updatedSelection","hasSelection","textBeforeCaret","endsWith","matches","indent","chars","metaKey","ctrlKey","altKey","setState","_handleChange","onContextMenu","console","log","pageY","pageX","loadMenuItems","then","li","handleClick","onClick","style","padding","highlight","textareaId","textareaClassName","autoFocus","disabled","form","maxLength","minLength","name","placeholder","readOnly","required","onFocus","onBlur","onKeyUp","preClassName","rest","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","highlighted","addClass","styles","container","c","editor","textarea","dangerouslySetInnerHTML","__html","children","history","session","Component","defaultProps","textAlign","boxSizing","overflow","height","width","resize","color","MozOsxFontSmoothing","WebkitFontSmoothing","WebkitTextFillColor","pointerEvents","margin","border","background","display","fontFamily","fontSize","fontStyle","fontVariantLigatures","fontWeight","letterSpacing","lineHeight","textIndent","textRendering","textTransform","whiteSpace","wordBreak","overflowWrap"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\r\n/* global global */\r\n\r\nimport * as React from 'react';\r\n\r\ntype Props = React.ElementConfig<'div'> & {\r\n  // Props for the component\r\n  value: string,\r\n  onValueChange: (value: string) => mixed,\r\n  highlight: (value: string) => string | React.Node,\r\n  tabSize: number,\r\n  insertSpaces: boolean,\r\n  ignoreTabKey: boolean,\r\n  padding: number | string,\r\n  style?: {},\r\n\r\n  // Props for the textarea\r\n  textareaId?: string,\r\n  textareaClassName?: string,\r\n  autoFocus?: boolean,\r\n  disabled?: boolean,\r\n  form?: string,\r\n  maxLength?: number,\r\n  minLength?: number,\r\n  name?: string,\r\n  placeholder?: string,\r\n  readOnly?: boolean,\r\n  required?: boolean,\r\n  onClick?: (e: MouseEvent) => mixed,\r\n  onFocus?: (e: FocusEvent) => mixed,\r\n  onBlur?: (e: FocusEvent) => mixed,\r\n  onKeyUp?: (e: KeyboardEvent) => mixed,\r\n  onKeyDown?: (e: KeyboardEvent) => mixed,\r\n  loadMenuItems?: (param) => mixed,\r\n\r\n  // Props for the hightlighted code’s pre element\r\n  preClassName?: string,\r\n};\r\n\r\ntype State = {\r\n  capture: boolean,\r\n  menu: any\r\n};\r\n\r\ntype Record = {\r\n  value: string,\r\n  selectionStart: number,\r\n  selectionEnd: number,\r\n};\r\n\r\ntype History = {\r\n  stack: Array<Record & { timestamp: number }>,\r\n  offset: number,\r\n};\r\n\r\nconst KEYCODE_ENTER = 13;\r\nconst KEYCODE_TAB = 9;\r\nconst KEYCODE_BACKSPACE = 8;\r\nconst KEYCODE_Y = 89;\r\nconst KEYCODE_Z = 90;\r\nconst KEYCODE_M = 77;\r\nconst KEYCODE_PARENS = 57;\r\nconst KEYCODE_BRACKETS = 219;\r\nconst KEYCODE_QUOTE = 222;\r\nconst KEYCODE_BACK_QUOTE = 192;\r\nconst KEYCODE_ESCAPE = 27;\r\n\r\nconst HISTORY_LIMIT = 100;\r\nconst HISTORY_TIME_GAP = 3000;\r\n\r\nconst isWindows = 'navigator' in global && /Win/i.test(navigator.platform);\r\nconst isMacLike =\r\n    'navigator' in global && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\nconst className = 'npm__react-simple-code-editor__textarea';\r\n\r\nconst cssText = /* CSS */ `\r\n/**\r\n * Reset the text fill color so that placeholder is visible\r\n */\r\n.${className}:empty {\r\n  -webkit-text-fill-color: inherit !important;\r\n}\r\n\r\n/**\r\n * Hack to apply on some CSS on IE10 and IE11\r\n */\r\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\r\n  /**\r\n    * IE doesn't support '-webkit-text-fill-color'\r\n    * So we use 'color: transparent' to make the text transparent on IE\r\n    * Unlike other browsers, it doesn't affect caret color in IE\r\n    */\r\n  .${className} {\r\n    color: transparent !important;\r\n  }\r\n\r\n  .${className}::selection {\r\n    background-color: #accef7 !important;\r\n    color: transparent !important;\r\n  }\r\n}\r\n`;\r\n\r\nexport default class Editor extends React.Component<Props, State> {\r\n  static defaultProps = {\r\n    tabSize: 2,\r\n    insertSpaces: true,\r\n    ignoreTabKey: false,\r\n    padding: 0,\r\n  };\r\n\r\n  state = {\r\n    capture: true,\r\n    top: 0,\r\n    left: 0,\r\n    isMenuVisible: false,\r\n    menu: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this._recordCurrentState();\r\n  }\r\n\r\n  _recordCurrentState = () => {\r\n    const input = this._input;\r\n\r\n    if (!input) return;\r\n\r\n    // Save current state of the input\r\n    const { value, selectionStart, selectionEnd } = input;\r\n\r\n    this._recordChange({\r\n      value,\r\n      selectionStart,\r\n      selectionEnd,\r\n    });\r\n  };\r\n\r\n  _getLines = (text: string, position: number) =>\r\n      text.substring(0, position).split('\\n');\r\n\r\n  _recordChange = (record: Record, overwrite?: boolean = false) => {\r\n    const { stack, offset } = this._history;\r\n\r\n    if (stack.length && offset > -1) {\r\n      // When something updates, drop the redo operations\r\n      this._history.stack = stack.slice(0, offset + 1);\r\n\r\n      // Limit the number of operations to 100\r\n      const count = this._history.stack.length;\r\n\r\n      if (count > HISTORY_LIMIT) {\r\n        const extras = count - HISTORY_LIMIT;\r\n\r\n        this._history.stack = stack.slice(extras, count);\r\n        this._history.offset = Math.max(this._history.offset - extras, 0);\r\n      }\r\n    }\r\n\r\n    const timestamp = Date.now();\r\n\r\n    if (overwrite) {\r\n      const last = this._history.stack[this._history.offset];\r\n\r\n      if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\r\n        // A previous entry exists and was in short interval\r\n\r\n        // Match the last word in the line\r\n        const re = /[^a-z0-9]([a-z0-9]+)$/i;\r\n\r\n        // Get the previous line\r\n        const previous = this._getLines(last.value, last.selectionStart)\r\n            .pop()\r\n            .match(re);\r\n\r\n        // Get the current line\r\n        const current = this._getLines(record.value, record.selectionStart)\r\n            .pop()\r\n            .match(re);\r\n\r\n        if (previous && current && current[1].startsWith(previous[1])) {\r\n          // The last word of the previous line and current line match\r\n          // Overwrite previous entry so that undo will remove whole word\r\n          this._history.stack[this._history.offset] = { ...record, timestamp };\r\n\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add the new operation to the stack\r\n    this._history.stack.push({ ...record, timestamp });\r\n    this._history.offset++;\r\n  };\r\n\r\n  _updateInput = (record: Record) => {\r\n    const input = this._input;\r\n\r\n    if (!input) return;\r\n\r\n    // Update values and selection state\r\n    input.value = record.value;\r\n    input.selectionStart = record.selectionStart;\r\n    input.selectionEnd = record.selectionEnd;\r\n\r\n    this.props.onValueChange(record.value);\r\n  };\r\n\r\n  _applyEdits = (record: Record) => {\r\n    // Save last selection state\r\n    const input = this._input;\r\n    const last = this._history.stack[this._history.offset];\r\n\r\n    if (last && input) {\r\n      this._history.stack[this._history.offset] = {\r\n        ...last,\r\n        selectionStart: input.selectionStart,\r\n        selectionEnd: input.selectionEnd,\r\n      };\r\n    }\r\n\r\n    // Save the changes\r\n    this._recordChange(record);\r\n    this._updateInput(record);\r\n  };\r\n\r\n  _undoEdit = () => {\r\n    const { stack, offset } = this._history;\r\n\r\n    // Get the previous edit\r\n    const record = stack[offset - 1];\r\n\r\n    if (record) {\r\n      // Apply the changes and update the offset\r\n      this._updateInput(record);\r\n      this._history.offset = Math.max(offset - 1, 0);\r\n    }\r\n  };\r\n\r\n  _redoEdit = () => {\r\n    const { stack, offset } = this._history;\r\n\r\n    // Get the next edit\r\n    const record = stack[offset + 1];\r\n\r\n    if (record) {\r\n      // Apply the changes and update the offset\r\n      this._updateInput(record);\r\n      this._history.offset = Math.min(offset + 1, stack.length - 1);\r\n    }\r\n  };\r\n\r\n  _handleKeyDown = (e: *) => {\r\n    const { tabSize, insertSpaces, ignoreTabKey, onKeyDown } = this.props;\r\n\r\n    if (onKeyDown) {\r\n      onKeyDown(e);\r\n\r\n      if (e.defaultPrevented) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (e.keyCode === KEYCODE_ESCAPE) {\r\n      e.target.blur();\r\n    }\r\n\r\n    const { value, selectionStart, selectionEnd } = e.target;\r\n\r\n    const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\r\n\r\n    if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.state.capture) {\r\n      // Prevent focus change\r\n      e.preventDefault();\r\n\r\n      if (e.shiftKey) {\r\n        // Unindent selected lines\r\n        const linesBeforeCaret = this._getLines(value, selectionStart);\r\n        const startLine = linesBeforeCaret.length - 1;\r\n        const endLine = this._getLines(value, selectionEnd).length - 1;\r\n        const nextValue = value\r\n            .split('\\n')\r\n            .map((line, i) => {\r\n              if (\r\n                  i >= startLine &&\r\n                  i <= endLine &&\r\n                  line.startsWith(tabCharacter)\r\n              ) {\r\n                return line.substring(tabCharacter.length);\r\n              }\r\n\r\n              return line;\r\n            })\r\n            .join('\\n');\r\n\r\n        if (value !== nextValue) {\r\n          const startLineText = linesBeforeCaret[startLine];\r\n\r\n          this._applyEdits({\r\n            value: nextValue,\r\n            // Move the start cursor if first line in selection was modified\r\n            // It was modified only if it started with a tab\r\n            selectionStart: startLineText.startsWith(tabCharacter)\r\n                ? selectionStart - tabCharacter.length\r\n                : selectionStart,\r\n            // Move the end cursor by total number of characters removed\r\n            selectionEnd: selectionEnd - (value.length - nextValue.length),\r\n          });\r\n        }\r\n      } else if (selectionStart !== selectionEnd) {\r\n        // Indent selected lines\r\n        const linesBeforeCaret = this._getLines(value, selectionStart);\r\n        const startLine = linesBeforeCaret.length - 1;\r\n        const endLine = this._getLines(value, selectionEnd).length - 1;\r\n        const startLineText = linesBeforeCaret[startLine];\r\n\r\n        this._applyEdits({\r\n          value: value\r\n              .split('\\n')\r\n              .map((line, i) => {\r\n                if (i >= startLine && i <= endLine) {\r\n                  return tabCharacter + line;\r\n                }\r\n\r\n                return line;\r\n              })\r\n              .join('\\n'),\r\n          // Move the start cursor by number of characters added in first line of selection\r\n          // Don't move it if it there was no text before cursor\r\n          selectionStart: /\\S/.test(startLineText)\r\n              ? selectionStart + tabCharacter.length\r\n              : selectionStart,\r\n          // Move the end cursor by total number of characters added\r\n          selectionEnd:\r\n              selectionEnd + tabCharacter.length * (endLine - startLine + 1),\r\n        });\r\n      } else {\r\n        const updatedSelection = selectionStart + tabCharacter.length;\r\n\r\n        this._applyEdits({\r\n          // Insert tab character at caret\r\n          value:\r\n              value.substring(0, selectionStart) +\r\n              tabCharacter +\r\n              value.substring(selectionEnd),\r\n          // Update caret position\r\n          selectionStart: updatedSelection,\r\n          selectionEnd: updatedSelection,\r\n        });\r\n      }\r\n    } else if (e.keyCode === KEYCODE_BACKSPACE) {\r\n      const hasSelection = selectionStart !== selectionEnd;\r\n      const textBeforeCaret = value.substring(0, selectionStart);\r\n\r\n      if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\r\n        // Prevent default delete behaviour\r\n        e.preventDefault();\r\n\r\n        const updatedSelection = selectionStart - tabCharacter.length;\r\n\r\n        this._applyEdits({\r\n          // Remove tab character at caret\r\n          value:\r\n              value.substring(0, selectionStart - tabCharacter.length) +\r\n              value.substring(selectionEnd),\r\n          // Update caret position\r\n          selectionStart: updatedSelection,\r\n          selectionEnd: updatedSelection,\r\n        });\r\n      }\r\n    } else if (e.keyCode === KEYCODE_ENTER) {\r\n      // Ignore selections\r\n      if (selectionStart === selectionEnd) {\r\n        // Get the current line\r\n        const line = this._getLines(value, selectionStart).pop();\r\n        const matches = line.match(/^\\s+/);\r\n\r\n        if (matches && matches[0]) {\r\n          e.preventDefault();\r\n\r\n          // Preserve indentation on inserting a new line\r\n          const indent = '\\n' + matches[0];\r\n          const updatedSelection = selectionStart + indent.length;\r\n\r\n          this._applyEdits({\r\n            // Insert indentation character at caret\r\n            value:\r\n                value.substring(0, selectionStart) +\r\n                indent +\r\n                value.substring(selectionEnd),\r\n            // Update caret position\r\n            selectionStart: updatedSelection,\r\n            selectionEnd: updatedSelection,\r\n          });\r\n        }\r\n      }\r\n    } else if (\r\n        e.keyCode === KEYCODE_PARENS ||\r\n        e.keyCode === KEYCODE_BRACKETS ||\r\n        e.keyCode === KEYCODE_QUOTE ||\r\n        e.keyCode === KEYCODE_BACK_QUOTE\r\n    ) {\r\n      let chars;\r\n\r\n      if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\r\n        chars = ['(', ')'];\r\n      } else if (e.keyCode === KEYCODE_BRACKETS) {\r\n        if (e.shiftKey) {\r\n          chars = ['{', '}'];\r\n        } else {\r\n          chars = ['[', ']'];\r\n        }\r\n      } else if (e.keyCode === KEYCODE_QUOTE) {\r\n        if (e.shiftKey) {\r\n          chars = ['\"', '\"'];\r\n        } else {\r\n          chars = [\"'\", \"'\"];\r\n        }\r\n      } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\r\n        chars = ['`', '`'];\r\n      }\r\n\r\n      // If text is selected, wrap them in the characters\r\n      if (selectionStart !== selectionEnd && chars) {\r\n        e.preventDefault();\r\n\r\n        this._applyEdits({\r\n          value:\r\n              value.substring(0, selectionStart) +\r\n              chars[0] +\r\n              value.substring(selectionStart, selectionEnd) +\r\n              chars[1] +\r\n              value.substring(selectionEnd),\r\n          // Update caret position\r\n          selectionStart,\r\n          selectionEnd: selectionEnd + 2,\r\n        });\r\n      }\r\n    } else if (\r\n        (isMacLike\r\n            ? // Trigger undo with ⌘+Z on Mac\r\n            e.metaKey && e.keyCode === KEYCODE_Z\r\n            : // Trigger undo with Ctrl+Z on other platforms\r\n            e.ctrlKey && e.keyCode === KEYCODE_Z) &&\r\n        !e.shiftKey &&\r\n        !e.altKey\r\n    ) {\r\n      e.preventDefault();\r\n\r\n      this._undoEdit();\r\n    } else if (\r\n        (isMacLike\r\n            ? // Trigger redo with ⌘+Shift+Z on Mac\r\n            e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\r\n            : isWindows\r\n                ? // Trigger redo with Ctrl+Y on Windows\r\n                e.ctrlKey && e.keyCode === KEYCODE_Y\r\n                : // Trigger redo with Ctrl+Shift+Z on other platforms\r\n                e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\r\n        !e.altKey\r\n    ) {\r\n      e.preventDefault();\r\n\r\n      this._redoEdit();\r\n    } else if (\r\n        e.keyCode === KEYCODE_M &&\r\n        e.ctrlKey &&\r\n        (isMacLike ? e.shiftKey : true)\r\n    ) {\r\n      e.preventDefault();\r\n\r\n      // Toggle capturing tab key so users can focus away\r\n      this.setState(state => ({\r\n        capture: !state.capture,\r\n      }));\r\n    }\r\n  };\r\n\r\n  _handleChange = (e: *) => {\r\n    const { value, selectionStart, selectionEnd } = e.target;\r\n\r\n    this._recordChange(\r\n        {\r\n          value,\r\n          selectionStart,\r\n          selectionEnd,\r\n        },\r\n        true\r\n    );\r\n\r\n    this.props.onValueChange(value);\r\n  };\r\n\r\n  _history: History = {\r\n    stack: [],\r\n    offset: -1,\r\n  };\r\n\r\n  _input: ?HTMLTextAreaElement;\r\n\r\n  get session() {\r\n    return {\r\n      history: this._history,\r\n    };\r\n  }\r\n\r\n  set session(session: { history: History }) {\r\n    this._history = session.history;\r\n  }\r\n\r\n  onContextMenu = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Caret position: \" + e.target.selectionStart, e.target.value.substring(0, e.target.selectionStart));\r\n    console.log(e.pageY, e.pageX);\r\n    this.setState({\r\n      isMenuVisible: true,\r\n      top: e.pageY,\r\n      left: e.pageX,\r\n      menu: null\r\n    });\r\n    this.props.loadMenuItems(e.target.value.substring(0, e.target.selectionStart)).then((li) => {\r\n        this.setState({ menu: <ul>{li}</ul>});\r\n      });\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    this.setState({ isMenuVisible: false, menu: null });\r\n    if(this.props.onClick) this.props.onClick(e);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      value,\r\n      style,\r\n      padding,\r\n      highlight,\r\n      textareaId,\r\n      textareaClassName,\r\n      autoFocus,\r\n      disabled,\r\n      form,\r\n      maxLength,\r\n      minLength,\r\n      name,\r\n      placeholder,\r\n      readOnly,\r\n      required,\r\n      onClick,\r\n      onFocus,\r\n      onBlur,\r\n      onKeyUp,\r\n      /* eslint-disable no-unused-vars */\r\n      onKeyDown,\r\n      onValueChange,\r\n      tabSize,\r\n      insertSpaces,\r\n      ignoreTabKey,\r\n      /* eslint-enable no-unused-vars */\r\n      preClassName,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const contentStyle = {\r\n      paddingTop: padding,\r\n      paddingRight: padding,\r\n      paddingBottom: padding,\r\n      paddingLeft: padding,\r\n    };\r\n\r\n    const highlighted = highlight(value);\r\n    const addClass = this.state.isMenuVisible ? 'visible' : ''\r\n    return (\r\n        <React.Fragment>\r\n          <div className={`menu ${addClass}`} style={{ top: this.state.top, left: this.state.left }}>{this.state.menu}</div>\r\n          <div {...rest} style={{ ...styles.container, ...style }}>\r\n\r\n        <textarea\r\n            ref={c => (this._input = c)}\r\n            style={{\r\n              ...styles.editor,\r\n              ...styles.textarea,\r\n              ...contentStyle,\r\n            }}\r\n            className={\r\n              className + (textareaClassName ? ` ${textareaClassName}` : '')\r\n            }\r\n            id={textareaId}\r\n            value={value}\r\n            onChange={this._handleChange}\r\n            onContextMenu={this.onContextMenu}\r\n            onKeyDown={this._handleKeyDown}\r\n            onClick={this.handleClick}\r\n            onKeyUp={onKeyUp}\r\n            onFocus={onFocus}\r\n            onBlur={onBlur}\r\n            disabled={disabled}\r\n            form={form}\r\n            maxLength={maxLength}\r\n            minLength={minLength}\r\n            name={name}\r\n            placeholder={placeholder}\r\n            readOnly={readOnly}\r\n            required={required}\r\n            autoFocus={autoFocus}\r\n            autoCapitalize=\"off\"\r\n            autoComplete=\"off\"\r\n            autoCorrect=\"off\"\r\n            spellCheck={false}\r\n            data-gramm={false}\r\n        />\r\n            <pre\r\n                className={preClassName}\r\n                aria-hidden=\"true\"\r\n                style={{ ...styles.editor, ...styles.highlight, ...contentStyle }}\r\n                {...(typeof highlighted === 'string'\r\n                    ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\r\n                    : { children: highlighted })}\r\n            />\r\n            {/* eslint-disable-next-line react/no-danger */}\r\n            <style type=\"text/css\" dangerouslySetInnerHTML={{ __html: cssText }} />\r\n          </div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    textAlign: 'left',\r\n    boxSizing: 'border-box',\r\n    padding: 0,\r\n    overflow: 'hidden',\r\n  },\r\n  textarea: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    height: '100%',\r\n    width: '100%',\r\n    resize: 'none',\r\n    color: 'inherit',\r\n    overflow: 'hidden',\r\n    MozOsxFontSmoothing: 'grayscale',\r\n    WebkitFontSmoothing: 'antialiased',\r\n    WebkitTextFillColor: 'transparent',\r\n  },\r\n  highlight: {\r\n    position: 'relative',\r\n    pointerEvents: 'none',\r\n  },\r\n  editor: {\r\n    margin: 0,\r\n    border: 0,\r\n    background: 'none',\r\n    boxSizing: 'inherit',\r\n    display: 'inherit',\r\n    fontFamily: 'inherit',\r\n    fontSize: 'inherit',\r\n    fontStyle: 'inherit',\r\n    fontVariantLigatures: 'inherit',\r\n    fontWeight: 'inherit',\r\n    letterSpacing: 'inherit',\r\n    lineHeight: 'inherit',\r\n    tabSize: 'inherit',\r\n    textIndent: 'inherit',\r\n    textRendering: 'inherit',\r\n    textTransform: 'inherit',\r\n    whiteSpace: 'pre-wrap',\r\n    wordBreak: 'keep-all',\r\n    overflowWrap: 'break-word',\r\n  },\r\n};\r\n"]}